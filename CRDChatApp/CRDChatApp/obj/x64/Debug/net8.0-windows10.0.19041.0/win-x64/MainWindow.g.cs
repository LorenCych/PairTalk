#pragma checksum "C:\Users\loren\OneDrive\Desktop\My_GIthub_Repo_Collection\PairTalk\CRDChatApp\CRDChatApp\MainWindow.xaml" "{8829d00f-11b8-4213-878b-770e8597ac16}" "1D62E61A7F6D9DEAE555B478961D4A2E31760A9D70DCBB5950754178EA64CA88"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CRDChatApp
{
    partial class MainWindow : 
        global::Microsoft.UI.Xaml.Window, 
        global::Microsoft.UI.Xaml.Markup.IComponentConnector
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2502")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private static class XamlBindingSetters
        {
            public static void Set_Microsoft_UI_Xaml_Controls_PersonPicture_DisplayName(global::Microsoft.UI.Xaml.Controls.PersonPicture obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.DisplayName = value ?? global::System.String.Empty;
            }
        };

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2502")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private partial class MainWindow_obj1_Bindings :
            global::Microsoft.UI.Xaml.Markup.IDataTemplateComponent,
            global::Microsoft.UI.Xaml.Markup.IXamlBindScopeDiagnostics,
            global::Microsoft.UI.Xaml.Markup.IComponentConnector,
            IMainWindow_Bindings
        {
            private global::CRDChatApp.MainWindow dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);

            // Fields for each control that has bindings.
            private global::Microsoft.UI.Xaml.Controls.PersonPicture obj9;
            private global::Microsoft.UI.Xaml.Controls.PersonPicture obj10;

            // Static fields for each binding's enabled/disabled state
            private static bool isobj9DisplayNameDisabled = false;
            private static bool isobj10DisplayNameDisabled = false;

            public MainWindow_obj1_Bindings()
            {
            }

            public void Disable(int lineNumber, int columnNumber)
            {
                if (lineNumber == 137 && columnNumber == 13)
                {
                    isobj9DisplayNameDisabled = true;
                }
                else if (lineNumber == 142 && columnNumber == 13)
                {
                    isobj10DisplayNameDisabled = true;
                }
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 9: // MainWindow.xaml line 135
                        this.obj9 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.PersonPicture>(target);
                        break;
                    case 10: // MainWindow.xaml line 140
                        this.obj10 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.PersonPicture>(target);
                        break;
                    default:
                        break;
                }
            }
                        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2502")]
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
                        public global::Microsoft.UI.Xaml.Markup.IComponentConnector GetBindingConnector(int connectionId, object target) 
                        {
                            return null;
                        }

            // IDataTemplateComponent

            public void ProcessBindings(global::System.Object item, int itemIndex, int phase, out int nextPhase)
            {
                nextPhase = -1;
            }

            public void Recycle()
            {
                return;
            }

            // IMainWindow_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
            }

            public void DisconnectUnloadedObject(int connectionId)
            {
                throw new global::System.ArgumentException("No unloadable elements to disconnect.");
            }

            public bool SetDataRoot(global::System.Object newDataRoot)
            {
                if (newDataRoot != null)
                {
                    this.dataRoot = global::WinRT.CastExtensions.As<global::CRDChatApp.MainWindow>(newDataRoot);
                    return true;
                }
                return false;
            }

            public void Activated(object obj, global::Microsoft.UI.Xaml.WindowActivatedEventArgs data)
            {
                this.Initialize();
            }

            public void Loading(global::Microsoft.UI.Xaml.FrameworkElement src, object data)
            {
                this.Initialize();
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::CRDChatApp.MainWindow obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_RemoteUserAvaName(obj.RemoteUserAvaName, phase);
                        this.Update_LocalUserAvaName(obj.LocalUserAvaName, phase);
                    }
                }
            }
            private void Update_RemoteUserAvaName(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // MainWindow.xaml line 135
                    if (!isobj9DisplayNameDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_PersonPicture_DisplayName(this.obj9, obj, null);
                    }
                }
            }
            private void Update_LocalUserAvaName(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // MainWindow.xaml line 140
                    if (!isobj10DisplayNameDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_PersonPicture_DisplayName(this.obj10, obj, null);
                    }
                }
            }
        }

        /// <summary>
        /// Connect()
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2502")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Connect(int connectionId, object target)
        {
            switch(connectionId)
            {
            case 2: // MainWindow.xaml line 17
                {
                    this.MainAppPage = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Grid>(target);
                }
                break;
            case 3: // MainWindow.xaml line 31
                {
                    this.AppTitleBar = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Grid>(target);
                }
                break;
            case 4: // MainWindow.xaml line 148
                {
                    this.ChatScrollViewer = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.ScrollViewer>(target);
                }
                break;
            case 5: // MainWindow.xaml line 160
                {
                    this.MessageTextBox = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.TextBox>(target);
                    ((global::Microsoft.UI.Xaml.Controls.TextBox)this.MessageTextBox).KeyDown += this.MessageTextBox_KeyDown;
                }
                break;
            case 6: // MainWindow.xaml line 169
                {
                    this.SendButton = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Button>(target);
                    ((global::Microsoft.UI.Xaml.Controls.Button)this.SendButton).Click += this.SendMessage;
                }
                break;
            case 7: // MainWindow.xaml line 179
                {
                    this.UserSwitchButton = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Primitives.ToggleButton>(target);
                    ((global::Microsoft.UI.Xaml.Controls.Primitives.ToggleButton)this.UserSwitchButton).Click += this.UserSwitchButton_Click;
                }
                break;
            case 8: // MainWindow.xaml line 149
                {
                    this.MessagePanel = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.StackPanel>(target);
                }
                break;
            case 9: // MainWindow.xaml line 135
                {
                    this.RemoteUserProfile = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.PersonPicture>(target);
                }
                break;
            case 10: // MainWindow.xaml line 140
                {
                    this.LocalUserProfile = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.PersonPicture>(target);
                }
                break;
            case 11: // MainWindow.xaml line 33
                {
                    this.LeftPaddingColumn = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.ColumnDefinition>(target);
                }
                break;
            case 12: // MainWindow.xaml line 34
                {
                    this.IconColumn = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.ColumnDefinition>(target);
                }
                break;
            case 13: // MainWindow.xaml line 35
                {
                    this.TitleColumn = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.ColumnDefinition>(target);
                }
                break;
            case 14: // MainWindow.xaml line 36
                {
                    this.LeftDragColumn = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.ColumnDefinition>(target);
                }
                break;
            case 15: // MainWindow.xaml line 37
                {
                    this.RightDragColumn = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.ColumnDefinition>(target);
                }
                break;
            case 16: // MainWindow.xaml line 38
                {
                    this.AccountColumn = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.ColumnDefinition>(target);
                }
                break;
            case 17: // MainWindow.xaml line 39
                {
                    this.RightPaddingColumn = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.ColumnDefinition>(target);
                }
                break;
            case 18: // MainWindow.xaml line 40
                {
                    this.ToggleButtonColumn = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.ColumnDefinition>(target);
                }
                break;
            case 19: // MainWindow.xaml line 41
                {
                    this.SettingsButtonColumn = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.ColumnDefinition>(target);
                }
                break;
            case 20: // MainWindow.xaml line 44
                {
                    this.TitleBarIcon = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Image>(target);
                }
                break;
            case 21: // MainWindow.xaml line 49
                {
                    this.TitleBarTextBlock = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.TextBlock>(target);
                }
                break;
            case 22: // MainWindow.xaml line 54
                {
                    this.PinToggleButton = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Primitives.ToggleButton>(target);
                    ((global::Microsoft.UI.Xaml.Controls.Primitives.ToggleButton)this.PinToggleButton).Checked += this.PinToggleButton_Checked;
                    ((global::Microsoft.UI.Xaml.Controls.Primitives.ToggleButton)this.PinToggleButton).Unchecked += this.PinToggleButton_Unchecked;
                }
                break;
            case 23: // MainWindow.xaml line 76
                {
                    this.PinIcon2 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.FontIcon>(target);
                }
                break;
            case 24: // MainWindow.xaml line 85
                {
                    this.RadioLightMode = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.RadioMenuFlyoutItem>(target);
                    ((global::Microsoft.UI.Xaml.Controls.RadioMenuFlyoutItem)this.RadioLightMode).Click += this.AppTheme_Click;
                }
                break;
            case 25: // MainWindow.xaml line 94
                {
                    this.RadioDarkMode = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.RadioMenuFlyoutItem>(target);
                    ((global::Microsoft.UI.Xaml.Controls.RadioMenuFlyoutItem)this.RadioDarkMode).Click += this.AppTheme_Click;
                }
                break;
            case 26: // MainWindow.xaml line 104
                {
                    global::Microsoft.UI.Xaml.Controls.MenuFlyoutItem element26 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.MenuFlyoutItem>(target);
                    ((global::Microsoft.UI.Xaml.Controls.MenuFlyoutItem)element26).Click += this.SetProfile_Click;
                }
                break;
            case 27: // MainWindow.xaml line 109
                {
                    this.BtnClearChat = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.MenuFlyoutItem>(target);
                    ((global::Microsoft.UI.Xaml.Controls.MenuFlyoutItem)this.BtnClearChat).Click += this.BtnClearChat_Click;
                }
                break;
            case 28: // MainWindow.xaml line 64
                {
                    this.PinIcon = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.FontIcon>(target);
                }
                break;
            default:
                break;
            }
            this._contentLoaded = true;
        }


        /// <summary>
        /// GetBindingConnector(int connectionId, object target)
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2502")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Microsoft.UI.Xaml.Markup.IComponentConnector GetBindingConnector(int connectionId, object target)
        {
            global::Microsoft.UI.Xaml.Markup.IComponentConnector returnValue = null;
            switch(connectionId)
            {
            case 1: // MainWindow.xaml line 2
                {                    
                    global::Microsoft.UI.Xaml.Window element1 = (global::Microsoft.UI.Xaml.Window)target;
                    MainWindow_obj1_Bindings bindings = new MainWindow_obj1_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(this);
                    this.Bindings = bindings;
                    element1.Activated += bindings.Activated;
                }
                break;
            }
            return returnValue;
        }
    }
}

